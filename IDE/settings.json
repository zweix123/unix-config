{
    // ==================== 个人配置 ====================
    // 个人 VSCode 配置, 通常放在 User Settings 中
    "editor.formatOnSave": true, // 保存时自动格式化, 这个可能会造成困难, 因为工作中大概率接触很多没有格式化过的代码 : )
    "editor.rulers": [ // 80, 120 字符分割线
        80,
        120
    ],
    "editor.minimap.enabled": true, // 显示缩略图
    "editor.wordWrap": "off", // 一行超过宽度是否换行, 默认不换行, 假如想换行则设置成on
    // golang
    "[go]": {
        "editor.links": false, // go mod name 通常是网址, 所以当想通过Command+左键跳转的时候, VSCode会将其作为网址打开, 故关闭
        "go.diagnostic.vulncheck": "Imports", // 检查已导入包的已知漏洞
        "go.logging.level": "verbose", // 详细的日志记录级别
        "go.liveErrors": {
            "enabled": true // 实时显示错误
        },
        // ref: https://github.com/Binaryify/OneDark-Pro/issues/822
        "go.inlayHints.compositeLiteralFields": true, // 内联提示(inlay hints)相关配置
        "go.inlayHints.compositeLiteralTypes": true,
        "go.inlayHints.constantValues": true,
        "go.inlayHints.functionTypeParameters": true,
        "go.inlayHints.parameterNames": true,
        "go.inlayHints.rangeVariableTypes": true,
        "go.autocompleteUnimportedPackages": true, // 其他
        "go.editorContextMenuCommands": {
            "removeTags": true,
            "fillStruct": true
        }
    },
    /// language server
    "gopls": {
        "ui.semanticTokens": true, // 高亮强化
        "ui.semanticTokenTypes": {
            "number": false, // 禁用数字的语义化高亮
            "string": false // 禁用字符串的语义化高亮
        },
        "formatting.gofumpt": true, // 格式化强化
        "usePlaceholders": true, // 补全强化
        "staticcheck": true, // lint强化
        "analyses": {
            "unusedparams": true,
            "unusedwrite": true
        }
    },
    /// linter
    "go.lintTool": "golangci-lint", // golangci-lint是多个linter的集合(golint, vet, errcheck, staticcheck), 使用配置文件 .golangci.yml 不过没有也能用
    "go.lintFlags": [
        "-set_exit_status" // 发现任何 lint 问题时返回一个非零的退出状态
    ],
    /// formatter
    "go.formatTool": "goimports", // 格式化强化, 但是不知道为什么没有和上面的冲突
    // python
    /// formatter
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter", // formatter: black
        // 下面的作用是: 当文件保存时, 对import语句进行整理
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit", // 使用isort包对import语句进行整理
            "source.unusedImports": "explicit", // 使用autoflake对未使用的import语句进行删除
            "notebook.source.organizeImports": "explicit" // 使用isort包对notebook中的import语句进行整理
        }
    },
    // 上面提到, python 文件保存时整理import语句, 使用isort包, 相关参数在这里配置
    "isort.args": [
        "--profile", // 预设的配置文件
        "black" // 预设的配置文件与black兼容
    ],
    /// linter
    "mypy-type-checker.args": [
        "--check-untyped-defs" // 对那些没有类型注解的函数或方法定义进行类型检查, 默认不检查
    ],
    // C/C++
    // others
    "files.associations": {
        "dryadsfile": "python", // dryadsfile
        "*.idl": "thrift" // only for didi
    }
    // ==================== 个人配置 ====================
}